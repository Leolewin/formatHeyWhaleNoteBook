(()=>{!function(){const o=()=>{const e=document.querySelector(".notebook__content"),o=[...document.querySelectorAll(".cell__editor-wrapper")];GM_log(o.length),t(0,o,e)},t=(e,o,n)=>{if(e>=o.length)return n.scrollTop=0,void document.querySelector("ul.notebook__actions").childNodes[0].click();const c=o[e];c.scrollIntoView(),c.click(),n.scrollTop=n.scrollTop-20,GM_log("scroll to:",c,e),setTimeout((()=>{c.parentNode.parentNode.querySelector(".cell__toolbar").childNodes[2].click()}),0),setTimeout((()=>{t(e+1,o,n)}),500)};setTimeout((()=>{(()=>{unsafeWindow.window.$pangu=pangu;const e=document.querySelector(".ivu-btn-ghost"),t=e.cloneNode(!0);t.querySelector("span").innerText="format",e.parentNode.prepend(t),t.setAttribute("style","background-color: #0969da !important; color: white"),t.onclick=o})(),e()}),5e3)}();const e=()=>{let e=!1;const o=unsafeWindow.window.XMLHttpRequest.prototype.open,t=unsafeWindow.window.XMLHttpRequest.prototype.send;unsafeWindow.window.XMLHttpRequest.prototype.open=function(t,n,...c){GM_log(t,n),e="PUT"===t&&/(\/api\/notebooks\/).*/.test(n),o.apply(this,arguments)},unsafeWindow.window.XMLHttpRequest.prototype.send=function(o){try{const t=JSON.parse(o);t&&t?.Content?.cells.length&&(t.Content.cells=t.Content.cells.map(((e,o)=>("markdown"===e.cell_type&&(e.source=pangu.spacing(e.source),e.source=e.source.replace(/(\*\*)\s(.*?)\s(\*\*)/g,"$1$2$3").replace(/(\*)\s(.*?)\s(\*)/g,"$1$2$3"),e.source.match(/\[.*\]\(((https?:\/\/|www\.)(([a-zA-Z0-9]+-?)+[a-zA-Z0-9]+\.)+[a-zA-Z]+)(:\d+)?(\/.*)?(\?.*)?(#.*)?\)/gi)?.every((o=>(e.source=e.source.replaceAll(o,o.replaceAll(/\s+/g,"")),!0)))),"code"===e.cell_type&&(e.source=e.source.replace(/(\n)$/,"")),e))),GM_log("updateData",t),o=JSON.stringify(t),e=!1)}catch(e){}t.apply(this,[o])}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV5d2hhbGUuZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJPQUVBLFdBQ0UsTUFXTUEsRUFBYSxLQUNmLE1BQU1DLEVBQVVDLFNBQVNDLGNBQWMsc0JBQ2pDQyxFQUFtQixJQUFJRixTQUFTRyxpQkFBaUIsMEJBQ3ZEQyxPQUFPRixFQUFpQkcsUUFDeEJDLEVBQVcsRUFBR0osRUFBa0JILEVBQVEsRUFHdENPLEVBQWEsQ0FBQ0MsRUFBS0MsRUFBT1QsS0FDNUIsR0FBSVEsR0FBT0MsRUFBTUgsT0FHZixPQUZBTixFQUFRVSxVQUFZLE9BQ3BCVCxTQUFTQyxjQUFjLHdCQUF3QlMsV0FBVyxHQUFHQyxRQUcvRCxNQUFNQyxFQUFRSixFQUFNRCxHQUNwQkssRUFBTUMsaUJBQ05ELEVBQU1ELFFBQ05aLEVBQVFVLFVBQVlWLEVBQVFVLFVBQVksR0FDeENMLE9BQU8sYUFBY1EsRUFBT0wsR0FFNUJPLFlBQVcsS0FFUEYsRUFBTUcsV0FBV0EsV0FBV2QsY0FBYyxrQkFBa0JTLFdBQVcsR0FBR0MsT0FBTyxHQUNsRixHQUVIRyxZQUFXLEtBQ1BSLEVBQVdDLEVBQU0sRUFBR0MsRUFBT1QsRUFBUSxHQUNwQyxJQUFHLEVBR1ZlLFlBQVcsS0F4Q2dCLE1BQ3ZCRSxhQUFhQyxPQUFPQyxPQUFTQyxNQUM3QixNQUFNQyxFQUFZcEIsU0FBU0MsY0FBYyxrQkFDbkNvQixFQUFhRCxFQUFVRSxXQUFVLEdBQ3ZDRCxFQUFXcEIsY0FBYyxRQUFRc0IsVUFBWSxTQUM3Q0gsRUFBVUwsV0FBV1MsUUFBUUgsR0FFN0JBLEVBQVdJLGFBQWMsUUFBUyxzREFDbENKLEVBQVdLLFFBQVU1QixDQUFVLEVBaUMvQjZCLEdBQ0FDLEdBQWEsR0FDZCxJQUVKLENBOUNELEdBZ0RBLE1BQU1BLEVBQWMsS0FDbEIsSUFBSUMsR0FBZSxFQUNuQixNQUFNQyxFQUFhZCxhQUFhQyxPQUFPYyxlQUFlQyxVQUFVQyxLQUMxREMsRUFBYWxCLGFBQWFDLE9BQU9jLGVBQWVDLFVBQVVHLEtBQ2hFbkIsYUFBYUMsT0FBT2MsZUFBZUMsVUFBVUMsS0FBTyxTQUFVRyxFQUFRQyxLQUFRQyxHQUM1RWxDLE9BQU9nQyxFQUFRQyxHQUNmUixFQUEwQixRQUFYTyxHQUFvQix5QkFBeUJHLEtBQUtGLEdBQ2pFUCxFQUFXVSxNQUFNQyxLQUFNQyxVQUN6QixFQUVBMUIsYUFBYUMsT0FBT2MsZUFBZUMsVUFBVUcsS0FBTyxTQUFVUSxHQUM1RCxJQUNFLE1BQU1DLEVBQWFDLEtBQUtDLE1BQU1ILEdBQzFCQyxHQUFjQSxHQUFZRyxTQUFTQyxNQUFNM0MsU0FFM0N1QyxFQUFXRyxRQUFRQyxNQUFRSixFQUFXRyxRQUFRQyxNQUFNQyxLQUFJLENBQUNDLEVBQU0zQyxLQUN0QyxhQUFuQjJDLEVBQUtDLFlBQ1BELEVBQUtFLE9BQVNqQyxNQUFNa0MsUUFBUUgsRUFBS0UsUUFDakNGLEVBQUtFLE9BQVNGLEVBQUtFLE9BQU9FLFFBQVEseUJBQTBCLFVBQVVBLFFBQVEscUJBQXNCLFVBRXBHSixFQUFLRSxPQUFPRyxNQUFNLDRHQUNkQyxPQUFNbkIsSUFDTmEsRUFBS0UsT0FBU0YsRUFBS0UsT0FBT0ssV0FBV3BCLEVBQUtBLEVBQUlvQixXQUFXLE9BQVEsTUFDMUQsTUFHVSxTQUFuQlAsRUFBS0MsWUFDUEQsRUFBS0UsT0FBU0YsRUFBS0UsT0FBT0UsUUFBUSxRQUFTLEtBRXRDSixLQUdUOUMsT0FBTyxhQUFjd0MsR0FDckJELEVBQU9FLEtBQUthLFVBQVVkLEdBQ3RCZixHQUFlLEVBR04sQ0FBYixNQUFPOEIsR0FBTSxDQUNiekIsRUFBV00sTUFBTUMsS0FBTSxDQUFDRSxHQUMxQixDQUFDLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb3JtYXRoZXl3aGFsZW5vdGVib29rLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBwYW5ndSBmcm9tICdwYW5ndSc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgY29uc3QgY3JlYXRlRm9ybWF0QnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICB1bnNhZmVXaW5kb3cud2luZG93LiRwYW5ndSA9IHBhbmd1O1xyXG4gICAgICBjb25zdCBnaG9zdE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaXZ1LWJ0bi1naG9zdCcpO1xyXG4gICAgICBjb25zdCBmb3JtYXROb2RlID0gZ2hvc3ROb2RlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgZm9ybWF0Tm9kZS5xdWVyeVNlbGVjdG9yKCdzcGFuJykuaW5uZXJUZXh0ID0gXCJmb3JtYXRcIjtcclxuICAgICAgZ2hvc3ROb2RlLnBhcmVudE5vZGUucHJlcGVuZChmb3JtYXROb2RlKTtcclxuICAgICAgLy9mb3JtYXROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5pY29uZm9udCcpLnJlbW92ZSgpO1xyXG4gICAgICBmb3JtYXROb2RlLnNldEF0dHJpYnV0ZSggJ3N0eWxlJywgJ2JhY2tncm91bmQtY29sb3I6ICMwOTY5ZGEgIWltcG9ydGFudDsgY29sb3I6IHdoaXRlJyk7XHJcbiAgICAgIGZvcm1hdE5vZGUub25jbGljayA9IGZvcm1hdFBhZ2U7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZm9ybWF0UGFnZSA9ICgpID0+IHtcclxuICAgICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3RlYm9va19fY29udGVudCcpO1xyXG4gICAgICBjb25zdCBweXRob25Db2RlY2hpbGRzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsX19lZGl0b3Itd3JhcHBlcicpXTtcclxuICAgICAgR01fbG9nKHB5dGhvbkNvZGVjaGlsZHMubGVuZ3RoKTtcclxuICAgICAgZm9ybWF0Q29kZSgwLCBweXRob25Db2RlY2hpbGRzLCBjb250ZW50KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGZvcm1hdENvZGUgPSAoaWR4LCBpdGVtcywgY29udGVudCkgPT4ge1xyXG4gICAgICBpZiAoaWR4ID49IGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wID0gMDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd1bC5ub3RlYm9va19fYWN0aW9ucycpLmNoaWxkTm9kZXNbMF0uY2xpY2soKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgY2hpbGQgPSBpdGVtc1tpZHhdO1xyXG4gICAgICBjaGlsZC5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICBjaGlsZC5jbGljaygpO1xyXG4gICAgICBjb250ZW50LnNjcm9sbFRvcCA9IGNvbnRlbnQuc2Nyb2xsVG9wIC0gMjA7XHJcbiAgICAgIEdNX2xvZygnc2Nyb2xsIHRvOicsIGNoaWxkLCBpZHgpO1xyXG5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAvLyBmb3JtYXQgdGhlIHB5dGhvbiBjb2RlIGJ5IGNsaWNrIHRoZSBwYWdlIHByZXR0eSBidXR0b25cclxuICAgICAgICAgIGNoaWxkLnBhcmVudE5vZGUucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuY2VsbF9fdG9vbGJhcicpLmNoaWxkTm9kZXNbMl0uY2xpY2soKTtcclxuICAgICAgfSwgMClcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgZm9ybWF0Q29kZShpZHggKyAxLCBpdGVtcywgY29udGVudCk7XHJcbiAgICAgIH0sIDUwMClcclxuICB9XHJcblxyXG4gIHNldFRpbWVvdXQoKCkgPT57XHJcbiAgICAgIGNyZWF0ZUZvcm1hdEJ1dHRvbigpO1xyXG4gICAgICBmb3JtYXRCeVNhdigpO1xyXG4gIH0sIDUwMDApXHJcbiAgLy8gWW91ciBjb2RlIGhlcmUuLi5cclxufSkoKTtcclxuXHJcbmNvbnN0IGZvcm1hdEJ5U2F2ID0gKCkgPT4ge1xyXG4gIGxldCBzaG91bGRGb3JtYXQgPSBmYWxzZTtcclxuICBjb25zdCBvcmlnaW5PcGVuID0gdW5zYWZlV2luZG93LndpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3BlbjtcclxuICBjb25zdCBvcmlnaW5TZW5kID0gdW5zYWZlV2luZG93LndpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZDtcclxuICB1bnNhZmVXaW5kb3cud2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsLCAuLi5hcmdzKSB7XHJcbiAgICBHTV9sb2cobWV0aG9kLCB1cmwpXHJcbiAgICBzaG91bGRGb3JtYXQgPSBtZXRob2QgPT09ICdQVVQnICYmIC8oXFwvYXBpXFwvbm90ZWJvb2tzXFwvKS4qLy50ZXN0KHVybCk7XHJcbiAgICBvcmlnaW5PcGVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfTtcclxuXHJcbiAgdW5zYWZlV2luZG93LndpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1cGRhdGVEYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgaWYgKHVwZGF0ZURhdGEgJiYgdXBkYXRlRGF0YT8uQ29udGVudD8uY2VsbHMubGVuZ3RoKVxyXG4gICAgICB7XHJcbiAgICAgICAgdXBkYXRlRGF0YS5Db250ZW50LmNlbGxzID0gdXBkYXRlRGF0YS5Db250ZW50LmNlbGxzLm1hcCgoY2VsbCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoY2VsbC5jZWxsX3R5cGUgPT09ICdtYXJrZG93bicpIHtcclxuICAgICAgICAgICAgY2VsbC5zb3VyY2UgPSBwYW5ndS5zcGFjaW5nKGNlbGwuc291cmNlKTtcclxuICAgICAgICAgICAgY2VsbC5zb3VyY2UgPSBjZWxsLnNvdXJjZS5yZXBsYWNlKC8oXFwqXFwqKVxccyguKj8pXFxzKFxcKlxcKikvZywgJyQxJDIkMycpLnJlcGxhY2UoLyhcXCopXFxzKC4qPylcXHMoXFwqKS9nLCAnJDEkMiQzJyk7XHJcblxyXG4gICAgICAgICAgICBjZWxsLnNvdXJjZS5tYXRjaCgvXFxbLipcXF1cXCgoKGh0dHBzPzpcXC9cXC98d3d3XFwuKSgoW2EtekEtWjAtOV0rLT8pK1thLXpBLVowLTldK1xcLikrW2EtekEtWl0rKSg6XFxkKyk/KFxcLy4qKT8oXFw/LiopPygjLiopP1xcKS9pZylcclxuICAgICAgICAgICAgICA/LmV2ZXJ5KHVybCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnNvdXJjZSA9IGNlbGwuc291cmNlLnJlcGxhY2VBbGwodXJsLCB1cmwucmVwbGFjZUFsbCgvXFxzKy9nLCAnJykpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoY2VsbC5jZWxsX3R5cGUgPT09ICdjb2RlJykge1xyXG4gICAgICAgICAgICBjZWxsLnNvdXJjZSA9IGNlbGwuc291cmNlLnJlcGxhY2UoLyhcXG4pJC8sICcnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBjZWxsO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBHTV9sb2coJ3VwZGF0ZURhdGEnLCB1cGRhdGVEYXRhKVxyXG4gICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeSh1cGRhdGVEYXRhKTtcclxuICAgICAgICBzaG91bGRGb3JtYXQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge31cclxuICAgIG9yaWdpblNlbmQuYXBwbHkodGhpcywgW2RhdGFdKTtcclxuICB9O1xyXG59Il0sIm5hbWVzIjpbImZvcm1hdFBhZ2UiLCJjb250ZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHl0aG9uQ29kZWNoaWxkcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJHTV9sb2ciLCJsZW5ndGgiLCJmb3JtYXRDb2RlIiwiaWR4IiwiaXRlbXMiLCJzY3JvbGxUb3AiLCJjaGlsZE5vZGVzIiwiY2xpY2siLCJjaGlsZCIsInNjcm9sbEludG9WaWV3Iiwic2V0VGltZW91dCIsInBhcmVudE5vZGUiLCJ1bnNhZmVXaW5kb3ciLCJ3aW5kb3ciLCIkcGFuZ3UiLCJwYW5ndSIsImdob3N0Tm9kZSIsImZvcm1hdE5vZGUiLCJjbG9uZU5vZGUiLCJpbm5lclRleHQiLCJwcmVwZW5kIiwic2V0QXR0cmlidXRlIiwib25jbGljayIsImNyZWF0ZUZvcm1hdEJ1dHRvbiIsImZvcm1hdEJ5U2F2Iiwic2hvdWxkRm9ybWF0Iiwib3JpZ2luT3BlbiIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvdG90eXBlIiwib3BlbiIsIm9yaWdpblNlbmQiLCJzZW5kIiwibWV0aG9kIiwidXJsIiwiYXJncyIsInRlc3QiLCJhcHBseSIsInRoaXMiLCJhcmd1bWVudHMiLCJkYXRhIiwidXBkYXRlRGF0YSIsIkpTT04iLCJwYXJzZSIsIkNvbnRlbnQiLCJjZWxscyIsIm1hcCIsImNlbGwiLCJjZWxsX3R5cGUiLCJzb3VyY2UiLCJzcGFjaW5nIiwicmVwbGFjZSIsIm1hdGNoIiwiZXZlcnkiLCJyZXBsYWNlQWxsIiwic3RyaW5naWZ5IiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==